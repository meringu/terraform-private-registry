// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/meringu/terraform-private-registry/internal/ent/module"
	"github.com/meringu/terraform-private-registry/internal/ent/moduleversion"
	"github.com/meringu/terraform-private-registry/internal/ent/predicate"
)

// ModuleVersionQuery is the builder for querying ModuleVersion entities.
type ModuleVersionQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.ModuleVersion
	// intermediate queries.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (mvq *ModuleVersionQuery) Where(ps ...predicate.ModuleVersion) *ModuleVersionQuery {
	mvq.predicates = append(mvq.predicates, ps...)
	return mvq
}

// Limit adds a limit step to the query.
func (mvq *ModuleVersionQuery) Limit(limit int) *ModuleVersionQuery {
	mvq.limit = &limit
	return mvq
}

// Offset adds an offset step to the query.
func (mvq *ModuleVersionQuery) Offset(offset int) *ModuleVersionQuery {
	mvq.offset = &offset
	return mvq
}

// Order adds an order step to the query.
func (mvq *ModuleVersionQuery) Order(o ...Order) *ModuleVersionQuery {
	mvq.order = append(mvq.order, o...)
	return mvq
}

// QueryModule chains the current query on the module edge.
func (mvq *ModuleVersionQuery) QueryModule() *ModuleQuery {
	query := &ModuleQuery{config: mvq.config}
	t1 := sql.Table(module.Table)
	t2 := mvq.sqlQuery()
	t2.Select(t2.C(moduleversion.ModuleColumn))
	query.sql = sql.Select(t1.Columns(module.Columns...)...).
		From(t1).
		Join(t2).
		On(t1.C(module.FieldID), t2.C(moduleversion.ModuleColumn))
	return query
}

// First returns the first ModuleVersion entity in the query. Returns *ErrNotFound when no moduleversion was found.
func (mvq *ModuleVersionQuery) First(ctx context.Context) (*ModuleVersion, error) {
	mvs, err := mvq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(mvs) == 0 {
		return nil, &ErrNotFound{moduleversion.Label}
	}
	return mvs[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mvq *ModuleVersionQuery) FirstX(ctx context.Context) *ModuleVersion {
	mv, err := mvq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return mv
}

// FirstID returns the first ModuleVersion id in the query. Returns *ErrNotFound when no id was found.
func (mvq *ModuleVersionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mvq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &ErrNotFound{moduleversion.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (mvq *ModuleVersionQuery) FirstXID(ctx context.Context) int {
	id, err := mvq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only ModuleVersion entity in the query, returns an error if not exactly one entity was returned.
func (mvq *ModuleVersionQuery) Only(ctx context.Context) (*ModuleVersion, error) {
	mvs, err := mvq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(mvs) {
	case 1:
		return mvs[0], nil
	case 0:
		return nil, &ErrNotFound{moduleversion.Label}
	default:
		return nil, &ErrNotSingular{moduleversion.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mvq *ModuleVersionQuery) OnlyX(ctx context.Context) *ModuleVersion {
	mv, err := mvq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return mv
}

// OnlyID returns the only ModuleVersion id in the query, returns an error if not exactly one id was returned.
func (mvq *ModuleVersionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mvq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &ErrNotFound{moduleversion.Label}
	default:
		err = &ErrNotSingular{moduleversion.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (mvq *ModuleVersionQuery) OnlyXID(ctx context.Context) int {
	id, err := mvq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ModuleVersions.
func (mvq *ModuleVersionQuery) All(ctx context.Context) ([]*ModuleVersion, error) {
	return mvq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (mvq *ModuleVersionQuery) AllX(ctx context.Context) []*ModuleVersion {
	mvs, err := mvq.All(ctx)
	if err != nil {
		panic(err)
	}
	return mvs
}

// IDs executes the query and returns a list of ModuleVersion ids.
func (mvq *ModuleVersionQuery) IDs(ctx context.Context) ([]int, error) {
	return mvq.sqlIDs(ctx)
}

// IDsX is like IDs, but panics if an error occurs.
func (mvq *ModuleVersionQuery) IDsX(ctx context.Context) []int {
	ids, err := mvq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mvq *ModuleVersionQuery) Count(ctx context.Context) (int, error) {
	return mvq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (mvq *ModuleVersionQuery) CountX(ctx context.Context) int {
	count, err := mvq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mvq *ModuleVersionQuery) Exist(ctx context.Context) (bool, error) {
	return mvq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (mvq *ModuleVersionQuery) ExistX(ctx context.Context) bool {
	exist, err := mvq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mvq *ModuleVersionQuery) Clone() *ModuleVersionQuery {
	return &ModuleVersionQuery{
		config:     mvq.config,
		limit:      mvq.limit,
		offset:     mvq.offset,
		order:      append([]Order{}, mvq.order...),
		unique:     append([]string{}, mvq.unique...),
		predicates: append([]predicate.ModuleVersion{}, mvq.predicates...),
		// clone intermediate queries.
		sql: mvq.sql.Clone(),
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Major int `json:"major,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ModuleVersion.Query().
//		GroupBy(moduleversion.FieldMajor).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (mvq *ModuleVersionQuery) GroupBy(field string, fields ...string) *ModuleVersionGroupBy {
	group := &ModuleVersionGroupBy{config: mvq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = mvq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Major int `json:"major,omitempty"`
//	}
//
//	client.ModuleVersion.Query().
//		Select(moduleversion.FieldMajor).
//		Scan(ctx, &v)
//
func (mvq *ModuleVersionQuery) Select(field string, fields ...string) *ModuleVersionSelect {
	selector := &ModuleVersionSelect{config: mvq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = mvq.sqlQuery()
	return selector
}

func (mvq *ModuleVersionQuery) sqlAll(ctx context.Context) ([]*ModuleVersion, error) {
	rows := &sql.Rows{}
	selector := mvq.sqlQuery()
	if unique := mvq.unique; len(unique) == 0 {
		selector.Distinct()
	}
	query, args := selector.Query()
	if err := mvq.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var mvs ModuleVersions
	if err := mvs.FromRows(rows); err != nil {
		return nil, err
	}
	mvs.config(mvq.config)
	return mvs, nil
}

func (mvq *ModuleVersionQuery) sqlCount(ctx context.Context) (int, error) {
	rows := &sql.Rows{}
	selector := mvq.sqlQuery()
	unique := []string{moduleversion.FieldID}
	if len(mvq.unique) > 0 {
		unique = mvq.unique
	}
	selector.Count(sql.Distinct(selector.Columns(unique...)...))
	query, args := selector.Query()
	if err := mvq.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()
	if !rows.Next() {
		return 0, errors.New("ent: no rows found")
	}
	var n int
	if err := rows.Scan(&n); err != nil {
		return 0, fmt.Errorf("ent: failed reading count: %v", err)
	}
	return n, nil
}

func (mvq *ModuleVersionQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := mvq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (mvq *ModuleVersionQuery) sqlIDs(ctx context.Context) ([]int, error) {
	vs, err := mvq.sqlAll(ctx)
	if err != nil {
		return nil, err
	}
	var ids []int
	for _, v := range vs {
		ids = append(ids, v.ID)
	}
	return ids, nil
}

func (mvq *ModuleVersionQuery) sqlQuery() *sql.Selector {
	t1 := sql.Table(moduleversion.Table)
	selector := sql.Select(t1.Columns(moduleversion.Columns...)...).From(t1)
	if mvq.sql != nil {
		selector = mvq.sql
		selector.Select(selector.Columns(moduleversion.Columns...)...)
	}
	for _, p := range mvq.predicates {
		p(selector)
	}
	for _, p := range mvq.order {
		p(selector)
	}
	if offset := mvq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mvq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ModuleVersionGroupBy is the builder for group-by ModuleVersion entities.
type ModuleVersionGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate queries.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mvgb *ModuleVersionGroupBy) Aggregate(fns ...Aggregate) *ModuleVersionGroupBy {
	mvgb.fns = append(mvgb.fns, fns...)
	return mvgb
}

// Scan applies the group-by query and scan the result into the given value.
func (mvgb *ModuleVersionGroupBy) Scan(ctx context.Context, v interface{}) error {
	return mvgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mvgb *ModuleVersionGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := mvgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (mvgb *ModuleVersionGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(mvgb.fields) > 1 {
		return nil, errors.New("ent: ModuleVersionGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := mvgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mvgb *ModuleVersionGroupBy) StringsX(ctx context.Context) []string {
	v, err := mvgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (mvgb *ModuleVersionGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(mvgb.fields) > 1 {
		return nil, errors.New("ent: ModuleVersionGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := mvgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mvgb *ModuleVersionGroupBy) IntsX(ctx context.Context) []int {
	v, err := mvgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (mvgb *ModuleVersionGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(mvgb.fields) > 1 {
		return nil, errors.New("ent: ModuleVersionGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := mvgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mvgb *ModuleVersionGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := mvgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (mvgb *ModuleVersionGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(mvgb.fields) > 1 {
		return nil, errors.New("ent: ModuleVersionGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := mvgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mvgb *ModuleVersionGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := mvgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mvgb *ModuleVersionGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := mvgb.sqlQuery().Query()
	if err := mvgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (mvgb *ModuleVersionGroupBy) sqlQuery() *sql.Selector {
	selector := mvgb.sql
	columns := make([]string, 0, len(mvgb.fields)+len(mvgb.fns))
	columns = append(columns, mvgb.fields...)
	for _, fn := range mvgb.fns {
		columns = append(columns, fn.SQL(selector))
	}
	return selector.Select(columns...).GroupBy(mvgb.fields...)
}

// ModuleVersionSelect is the builder for select fields of ModuleVersion entities.
type ModuleVersionSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (mvs *ModuleVersionSelect) Scan(ctx context.Context, v interface{}) error {
	return mvs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mvs *ModuleVersionSelect) ScanX(ctx context.Context, v interface{}) {
	if err := mvs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (mvs *ModuleVersionSelect) Strings(ctx context.Context) ([]string, error) {
	if len(mvs.fields) > 1 {
		return nil, errors.New("ent: ModuleVersionSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := mvs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mvs *ModuleVersionSelect) StringsX(ctx context.Context) []string {
	v, err := mvs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (mvs *ModuleVersionSelect) Ints(ctx context.Context) ([]int, error) {
	if len(mvs.fields) > 1 {
		return nil, errors.New("ent: ModuleVersionSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := mvs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mvs *ModuleVersionSelect) IntsX(ctx context.Context) []int {
	v, err := mvs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (mvs *ModuleVersionSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(mvs.fields) > 1 {
		return nil, errors.New("ent: ModuleVersionSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := mvs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mvs *ModuleVersionSelect) Float64sX(ctx context.Context) []float64 {
	v, err := mvs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (mvs *ModuleVersionSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(mvs.fields) > 1 {
		return nil, errors.New("ent: ModuleVersionSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := mvs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mvs *ModuleVersionSelect) BoolsX(ctx context.Context) []bool {
	v, err := mvs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mvs *ModuleVersionSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := mvs.sqlQuery().Query()
	if err := mvs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (mvs *ModuleVersionSelect) sqlQuery() sql.Querier {
	view := "moduleversion_view"
	return sql.Select(mvs.fields...).From(mvs.sql.As(view))
}
