// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/meringu/terraform-private-registry/internal/ent/migrate"

	"github.com/meringu/terraform-private-registry/internal/ent/module"
	"github.com/meringu/terraform-private-registry/internal/ent/moduleversion"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Module is the client for interacting with the Module builders.
	Module *ModuleClient
	// ModuleVersion is the client for interacting with the ModuleVersion builders.
	ModuleVersion *ModuleVersionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	c := config{log: log.Println}
	c.options(opts...)
	return &Client{
		config:        c,
		Schema:        migrate.NewSchema(c.driver),
		Module:        NewModuleClient(c),
		ModuleVersion: NewModuleVersionClient(c),
	}
}

// Open opens a connection to the database specified by the driver name and a
// driver-specific data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil

	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug}
	return &Tx{
		config:        cfg,
		Module:        NewModuleClient(cfg),
		ModuleVersion: NewModuleVersionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Module.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true}
	return &Client{
		config:        cfg,
		Schema:        migrate.NewSchema(cfg.driver),
		Module:        NewModuleClient(cfg),
		ModuleVersion: NewModuleVersionClient(cfg),
	}
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// ModuleClient is a client for the Module schema.
type ModuleClient struct {
	config
}

// NewModuleClient returns a client for the Module from the given config.
func NewModuleClient(c config) *ModuleClient {
	return &ModuleClient{config: c}
}

// Create returns a create builder for Module.
func (c *ModuleClient) Create() *ModuleCreate {
	return &ModuleCreate{config: c.config}
}

// Update returns an update builder for Module.
func (c *ModuleClient) Update() *ModuleUpdate {
	return &ModuleUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *ModuleClient) UpdateOne(m *Module) *ModuleUpdateOne {
	return c.UpdateOneID(m.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *ModuleClient) UpdateOneID(id int) *ModuleUpdateOne {
	return &ModuleUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Module.
func (c *ModuleClient) Delete() *ModuleDelete {
	return &ModuleDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ModuleClient) DeleteOne(m *Module) *ModuleDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ModuleClient) DeleteOneID(id int) *ModuleDeleteOne {
	return &ModuleDeleteOne{c.Delete().Where(module.ID(id))}
}

// Create returns a query builder for Module.
func (c *ModuleClient) Query() *ModuleQuery {
	return &ModuleQuery{config: c.config}
}

// Get returns a Module entity by its id.
func (c *ModuleClient) Get(ctx context.Context, id int) (*Module, error) {
	return c.Query().Where(module.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ModuleClient) GetX(ctx context.Context, id int) *Module {
	m, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return m
}

// QueryVersion queries the version edge of a Module.
func (c *ModuleClient) QueryVersion(m *Module) *ModuleVersionQuery {
	query := &ModuleVersionQuery{config: c.config}
	id := m.ID
	query.sql = sql.Select().From(sql.Table(moduleversion.Table)).
		Where(sql.EQ(module.VersionColumn, id))

	return query
}

// ModuleVersionClient is a client for the ModuleVersion schema.
type ModuleVersionClient struct {
	config
}

// NewModuleVersionClient returns a client for the ModuleVersion from the given config.
func NewModuleVersionClient(c config) *ModuleVersionClient {
	return &ModuleVersionClient{config: c}
}

// Create returns a create builder for ModuleVersion.
func (c *ModuleVersionClient) Create() *ModuleVersionCreate {
	return &ModuleVersionCreate{config: c.config}
}

// Update returns an update builder for ModuleVersion.
func (c *ModuleVersionClient) Update() *ModuleVersionUpdate {
	return &ModuleVersionUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *ModuleVersionClient) UpdateOne(mv *ModuleVersion) *ModuleVersionUpdateOne {
	return c.UpdateOneID(mv.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *ModuleVersionClient) UpdateOneID(id int) *ModuleVersionUpdateOne {
	return &ModuleVersionUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for ModuleVersion.
func (c *ModuleVersionClient) Delete() *ModuleVersionDelete {
	return &ModuleVersionDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ModuleVersionClient) DeleteOne(mv *ModuleVersion) *ModuleVersionDeleteOne {
	return c.DeleteOneID(mv.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ModuleVersionClient) DeleteOneID(id int) *ModuleVersionDeleteOne {
	return &ModuleVersionDeleteOne{c.Delete().Where(moduleversion.ID(id))}
}

// Create returns a query builder for ModuleVersion.
func (c *ModuleVersionClient) Query() *ModuleVersionQuery {
	return &ModuleVersionQuery{config: c.config}
}

// Get returns a ModuleVersion entity by its id.
func (c *ModuleVersionClient) Get(ctx context.Context, id int) (*ModuleVersion, error) {
	return c.Query().Where(moduleversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ModuleVersionClient) GetX(ctx context.Context, id int) *ModuleVersion {
	mv, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return mv
}

// QueryModule queries the module edge of a ModuleVersion.
func (c *ModuleVersionClient) QueryModule(mv *ModuleVersion) *ModuleQuery {
	query := &ModuleQuery{config: c.config}
	id := mv.ID
	t1 := sql.Table(module.Table)
	t2 := sql.Select(moduleversion.ModuleColumn).
		From(sql.Table(moduleversion.ModuleTable)).
		Where(sql.EQ(moduleversion.FieldID, id))
	query.sql = sql.Select().From(t1).Join(t2).On(t1.C(module.FieldID), t2.C(moduleversion.ModuleColumn))

	return query
}
