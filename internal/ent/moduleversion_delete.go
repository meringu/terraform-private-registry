// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/meringu/terraform-private-registry/internal/ent/moduleversion"
	"github.com/meringu/terraform-private-registry/internal/ent/predicate"
)

// ModuleVersionDelete is the builder for deleting a ModuleVersion entity.
type ModuleVersionDelete struct {
	config
	predicates []predicate.ModuleVersion
}

// Where adds a new predicate to the delete builder.
func (mvd *ModuleVersionDelete) Where(ps ...predicate.ModuleVersion) *ModuleVersionDelete {
	mvd.predicates = append(mvd.predicates, ps...)
	return mvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mvd *ModuleVersionDelete) Exec(ctx context.Context) (int, error) {
	return mvd.sqlExec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (mvd *ModuleVersionDelete) ExecX(ctx context.Context) int {
	n, err := mvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mvd *ModuleVersionDelete) sqlExec(ctx context.Context) (int, error) {
	var res sql.Result
	selector := sql.Select().From(sql.Table(moduleversion.Table))
	for _, p := range mvd.predicates {
		p(selector)
	}
	query, args := sql.Delete(moduleversion.Table).FromSelect(selector).Query()
	if err := mvd.driver.Exec(ctx, query, args, &res); err != nil {
		return 0, err
	}
	affected, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}
	return int(affected), nil
}

// ModuleVersionDeleteOne is the builder for deleting a single ModuleVersion entity.
type ModuleVersionDeleteOne struct {
	mvd *ModuleVersionDelete
}

// Exec executes the deletion query.
func (mvdo *ModuleVersionDeleteOne) Exec(ctx context.Context) error {
	n, err := mvdo.mvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &ErrNotFound{moduleversion.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mvdo *ModuleVersionDeleteOne) ExecX(ctx context.Context) {
	mvdo.mvd.ExecX(ctx)
}
