// Code generated by entc, DO NOT EDIT.

package moduleversion

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/meringu/terraform-private-registry/internal/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldID), id))
		},
	)
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(ids) == 0 {
				s.Where(sql.False())
				return
			}
			v := make([]interface{}, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
			s.Where(sql.In(s.C(FieldID), v...))
		},
	)
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(ids) == 0 {
				s.Where(sql.False())
				return
			}
			v := make([]interface{}, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
			s.Where(sql.NotIn(s.C(FieldID), v...))
		},
	)
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldID), id))
		},
	)
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldID), id))
		},
	)
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldID), id))
		},
	)
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldID), id))
		},
	)
}

// Major applies equality check predicate on the "major" field. It's identical to MajorEQ.
func Major(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldMajor), v))
		},
	)
}

// Minor applies equality check predicate on the "minor" field. It's identical to MinorEQ.
func Minor(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldMinor), v))
		},
	)
}

// Patch applies equality check predicate on the "patch" field. It's identical to PatchEQ.
func Patch(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldPatch), v))
		},
	)
}

// Tag applies equality check predicate on the "tag" field. It's identical to TagEQ.
func Tag(v string) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldTag), v))
		},
	)
}

// MajorEQ applies the EQ predicate on the "major" field.
func MajorEQ(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldMajor), v))
		},
	)
}

// MajorNEQ applies the NEQ predicate on the "major" field.
func MajorNEQ(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldMajor), v))
		},
	)
}

// MajorIn applies the In predicate on the "major" field.
func MajorIn(vs ...int) predicate.ModuleVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldMajor), v...))
		},
	)
}

// MajorNotIn applies the NotIn predicate on the "major" field.
func MajorNotIn(vs ...int) predicate.ModuleVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldMajor), v...))
		},
	)
}

// MajorGT applies the GT predicate on the "major" field.
func MajorGT(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldMajor), v))
		},
	)
}

// MajorGTE applies the GTE predicate on the "major" field.
func MajorGTE(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldMajor), v))
		},
	)
}

// MajorLT applies the LT predicate on the "major" field.
func MajorLT(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldMajor), v))
		},
	)
}

// MajorLTE applies the LTE predicate on the "major" field.
func MajorLTE(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldMajor), v))
		},
	)
}

// MinorEQ applies the EQ predicate on the "minor" field.
func MinorEQ(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldMinor), v))
		},
	)
}

// MinorNEQ applies the NEQ predicate on the "minor" field.
func MinorNEQ(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldMinor), v))
		},
	)
}

// MinorIn applies the In predicate on the "minor" field.
func MinorIn(vs ...int) predicate.ModuleVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldMinor), v...))
		},
	)
}

// MinorNotIn applies the NotIn predicate on the "minor" field.
func MinorNotIn(vs ...int) predicate.ModuleVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldMinor), v...))
		},
	)
}

// MinorGT applies the GT predicate on the "minor" field.
func MinorGT(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldMinor), v))
		},
	)
}

// MinorGTE applies the GTE predicate on the "minor" field.
func MinorGTE(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldMinor), v))
		},
	)
}

// MinorLT applies the LT predicate on the "minor" field.
func MinorLT(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldMinor), v))
		},
	)
}

// MinorLTE applies the LTE predicate on the "minor" field.
func MinorLTE(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldMinor), v))
		},
	)
}

// PatchEQ applies the EQ predicate on the "patch" field.
func PatchEQ(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldPatch), v))
		},
	)
}

// PatchNEQ applies the NEQ predicate on the "patch" field.
func PatchNEQ(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldPatch), v))
		},
	)
}

// PatchIn applies the In predicate on the "patch" field.
func PatchIn(vs ...int) predicate.ModuleVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldPatch), v...))
		},
	)
}

// PatchNotIn applies the NotIn predicate on the "patch" field.
func PatchNotIn(vs ...int) predicate.ModuleVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldPatch), v...))
		},
	)
}

// PatchGT applies the GT predicate on the "patch" field.
func PatchGT(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldPatch), v))
		},
	)
}

// PatchGTE applies the GTE predicate on the "patch" field.
func PatchGTE(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldPatch), v))
		},
	)
}

// PatchLT applies the LT predicate on the "patch" field.
func PatchLT(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldPatch), v))
		},
	)
}

// PatchLTE applies the LTE predicate on the "patch" field.
func PatchLTE(v int) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldPatch), v))
		},
	)
}

// TagEQ applies the EQ predicate on the "tag" field.
func TagEQ(v string) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldTag), v))
		},
	)
}

// TagNEQ applies the NEQ predicate on the "tag" field.
func TagNEQ(v string) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldTag), v))
		},
	)
}

// TagIn applies the In predicate on the "tag" field.
func TagIn(vs ...string) predicate.ModuleVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldTag), v...))
		},
	)
}

// TagNotIn applies the NotIn predicate on the "tag" field.
func TagNotIn(vs ...string) predicate.ModuleVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldTag), v...))
		},
	)
}

// TagGT applies the GT predicate on the "tag" field.
func TagGT(v string) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldTag), v))
		},
	)
}

// TagGTE applies the GTE predicate on the "tag" field.
func TagGTE(v string) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldTag), v))
		},
	)
}

// TagLT applies the LT predicate on the "tag" field.
func TagLT(v string) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldTag), v))
		},
	)
}

// TagLTE applies the LTE predicate on the "tag" field.
func TagLTE(v string) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldTag), v))
		},
	)
}

// TagContains applies the Contains predicate on the "tag" field.
func TagContains(v string) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldTag), v))
		},
	)
}

// TagHasPrefix applies the HasPrefix predicate on the "tag" field.
func TagHasPrefix(v string) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldTag), v))
		},
	)
}

// TagHasSuffix applies the HasSuffix predicate on the "tag" field.
func TagHasSuffix(v string) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldTag), v))
		},
	)
}

// TagEqualFold applies the EqualFold predicate on the "tag" field.
func TagEqualFold(v string) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldTag), v))
		},
	)
}

// TagContainsFold applies the ContainsFold predicate on the "tag" field.
func TagContainsFold(v string) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldTag), v))
		},
	)
}

// HasModule applies the HasEdge predicate on the "module" edge.
func HasModule() predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			t1 := s.Table()
			s.Where(sql.NotNull(t1.C(ModuleColumn)))
		},
	)
}

// HasModuleWith applies the HasEdge predicate on the "module" edge with a given conditions (other predicates).
func HasModuleWith(preds ...predicate.Module) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			t1 := s.Table()
			t2 := sql.Select(FieldID).From(sql.Table(ModuleInverseTable))
			for _, p := range preds {
				p(t2)
			}
			s.Where(sql.In(t1.C(ModuleColumn), t2))
		},
	)
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.ModuleVersion) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			for _, p := range predicates {
				p(s)
			}
		},
	)
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.ModuleVersion) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			for i, p := range predicates {
				if i > 0 {
					s.Or()
				}
				p(s)
			}
		},
	)
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ModuleVersion) predicate.ModuleVersion {
	return predicate.ModuleVersion(
		func(s *sql.Selector) {
			p(s.Not())
		},
	)
}
