// Code generated by entc, DO NOT EDIT.

package module

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/meringu/terraform-private-registry/internal/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldID), id))
		},
	)
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(ids) == 0 {
				s.Where(sql.False())
				return
			}
			v := make([]interface{}, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
			s.Where(sql.In(s.C(FieldID), v...))
		},
	)
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(ids) == 0 {
				s.Where(sql.False())
				return
			}
			v := make([]interface{}, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
			s.Where(sql.NotIn(s.C(FieldID), v...))
		},
	)
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldID), id))
		},
	)
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldID), id))
		},
	)
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldID), id))
		},
	)
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldID), id))
		},
	)
}

// Owner applies equality check predicate on the "owner" field. It's identical to OwnerEQ.
func Owner(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldOwner), v))
		},
	)
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldNamespace), v))
		},
	)
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldName), v))
		},
	)
}

// Provider applies equality check predicate on the "provider" field. It's identical to ProviderEQ.
func Provider(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldProvider), v))
		},
	)
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldDescription), v))
		},
	)
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldSource), v))
		},
	)
}

// Downloads applies equality check predicate on the "downloads" field. It's identical to DownloadsEQ.
func Downloads(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldDownloads), v))
		},
	)
}

// PublishedAt applies equality check predicate on the "published_at" field. It's identical to PublishedAtEQ.
func PublishedAt(v time.Time) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldPublishedAt), v))
		},
	)
}

// InstallationID applies equality check predicate on the "installation_id" field. It's identical to InstallationIDEQ.
func InstallationID(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldInstallationID), v))
		},
	)
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldAppID), v))
		},
	)
}

// RepoName applies equality check predicate on the "repo_name" field. It's identical to RepoNameEQ.
func RepoName(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldRepoName), v))
		},
	)
}

// OwnerEQ applies the EQ predicate on the "owner" field.
func OwnerEQ(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldOwner), v))
		},
	)
}

// OwnerNEQ applies the NEQ predicate on the "owner" field.
func OwnerNEQ(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldOwner), v))
		},
	)
}

// OwnerIn applies the In predicate on the "owner" field.
func OwnerIn(vs ...string) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldOwner), v...))
		},
	)
}

// OwnerNotIn applies the NotIn predicate on the "owner" field.
func OwnerNotIn(vs ...string) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldOwner), v...))
		},
	)
}

// OwnerGT applies the GT predicate on the "owner" field.
func OwnerGT(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldOwner), v))
		},
	)
}

// OwnerGTE applies the GTE predicate on the "owner" field.
func OwnerGTE(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldOwner), v))
		},
	)
}

// OwnerLT applies the LT predicate on the "owner" field.
func OwnerLT(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldOwner), v))
		},
	)
}

// OwnerLTE applies the LTE predicate on the "owner" field.
func OwnerLTE(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldOwner), v))
		},
	)
}

// OwnerContains applies the Contains predicate on the "owner" field.
func OwnerContains(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldOwner), v))
		},
	)
}

// OwnerHasPrefix applies the HasPrefix predicate on the "owner" field.
func OwnerHasPrefix(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldOwner), v))
		},
	)
}

// OwnerHasSuffix applies the HasSuffix predicate on the "owner" field.
func OwnerHasSuffix(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldOwner), v))
		},
	)
}

// OwnerEqualFold applies the EqualFold predicate on the "owner" field.
func OwnerEqualFold(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldOwner), v))
		},
	)
}

// OwnerContainsFold applies the ContainsFold predicate on the "owner" field.
func OwnerContainsFold(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldOwner), v))
		},
	)
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldNamespace), v))
		},
	)
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldNamespace), v))
		},
	)
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldNamespace), v...))
		},
	)
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldNamespace), v...))
		},
	)
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldNamespace), v))
		},
	)
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldNamespace), v))
		},
	)
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldNamespace), v))
		},
	)
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldNamespace), v))
		},
	)
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldNamespace), v))
		},
	)
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldNamespace), v))
		},
	)
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldNamespace), v))
		},
	)
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldNamespace), v))
		},
	)
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldNamespace), v))
		},
	)
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldName), v))
		},
	)
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldName), v))
		},
	)
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldName), v...))
		},
	)
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldName), v...))
		},
	)
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldName), v))
		},
	)
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldName), v))
		},
	)
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldName), v))
		},
	)
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldName), v))
		},
	)
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldName), v))
		},
	)
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldName), v))
		},
	)
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldName), v))
		},
	)
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldName), v))
		},
	)
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldName), v))
		},
	)
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldProvider), v))
		},
	)
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldProvider), v))
		},
	)
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...string) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldProvider), v...))
		},
	)
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...string) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldProvider), v...))
		},
	)
}

// ProviderGT applies the GT predicate on the "provider" field.
func ProviderGT(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldProvider), v))
		},
	)
}

// ProviderGTE applies the GTE predicate on the "provider" field.
func ProviderGTE(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldProvider), v))
		},
	)
}

// ProviderLT applies the LT predicate on the "provider" field.
func ProviderLT(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldProvider), v))
		},
	)
}

// ProviderLTE applies the LTE predicate on the "provider" field.
func ProviderLTE(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldProvider), v))
		},
	)
}

// ProviderContains applies the Contains predicate on the "provider" field.
func ProviderContains(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldProvider), v))
		},
	)
}

// ProviderHasPrefix applies the HasPrefix predicate on the "provider" field.
func ProviderHasPrefix(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldProvider), v))
		},
	)
}

// ProviderHasSuffix applies the HasSuffix predicate on the "provider" field.
func ProviderHasSuffix(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldProvider), v))
		},
	)
}

// ProviderEqualFold applies the EqualFold predicate on the "provider" field.
func ProviderEqualFold(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldProvider), v))
		},
	)
}

// ProviderContainsFold applies the ContainsFold predicate on the "provider" field.
func ProviderContainsFold(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldProvider), v))
		},
	)
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldDescription), v))
		},
	)
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldDescription), v))
		},
	)
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldDescription), v...))
		},
	)
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldDescription), v...))
		},
	)
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldDescription), v))
		},
	)
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldDescription), v))
		},
	)
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldDescription), v))
		},
	)
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldDescription), v))
		},
	)
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldDescription), v))
		},
	)
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldDescription), v))
		},
	)
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldDescription), v))
		},
	)
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldDescription), v))
		},
	)
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldDescription), v))
		},
	)
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldSource), v))
		},
	)
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldSource), v))
		},
	)
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...string) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldSource), v...))
		},
	)
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...string) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldSource), v...))
		},
	)
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldSource), v))
		},
	)
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldSource), v))
		},
	)
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldSource), v))
		},
	)
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldSource), v))
		},
	)
}

// SourceContains applies the Contains predicate on the "source" field.
func SourceContains(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldSource), v))
		},
	)
}

// SourceHasPrefix applies the HasPrefix predicate on the "source" field.
func SourceHasPrefix(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldSource), v))
		},
	)
}

// SourceHasSuffix applies the HasSuffix predicate on the "source" field.
func SourceHasSuffix(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldSource), v))
		},
	)
}

// SourceEqualFold applies the EqualFold predicate on the "source" field.
func SourceEqualFold(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldSource), v))
		},
	)
}

// SourceContainsFold applies the ContainsFold predicate on the "source" field.
func SourceContainsFold(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldSource), v))
		},
	)
}

// DownloadsEQ applies the EQ predicate on the "downloads" field.
func DownloadsEQ(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldDownloads), v))
		},
	)
}

// DownloadsNEQ applies the NEQ predicate on the "downloads" field.
func DownloadsNEQ(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldDownloads), v))
		},
	)
}

// DownloadsIn applies the In predicate on the "downloads" field.
func DownloadsIn(vs ...int64) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldDownloads), v...))
		},
	)
}

// DownloadsNotIn applies the NotIn predicate on the "downloads" field.
func DownloadsNotIn(vs ...int64) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldDownloads), v...))
		},
	)
}

// DownloadsGT applies the GT predicate on the "downloads" field.
func DownloadsGT(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldDownloads), v))
		},
	)
}

// DownloadsGTE applies the GTE predicate on the "downloads" field.
func DownloadsGTE(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldDownloads), v))
		},
	)
}

// DownloadsLT applies the LT predicate on the "downloads" field.
func DownloadsLT(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldDownloads), v))
		},
	)
}

// DownloadsLTE applies the LTE predicate on the "downloads" field.
func DownloadsLTE(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldDownloads), v))
		},
	)
}

// PublishedAtEQ applies the EQ predicate on the "published_at" field.
func PublishedAtEQ(v time.Time) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldPublishedAt), v))
		},
	)
}

// PublishedAtNEQ applies the NEQ predicate on the "published_at" field.
func PublishedAtNEQ(v time.Time) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldPublishedAt), v))
		},
	)
}

// PublishedAtIn applies the In predicate on the "published_at" field.
func PublishedAtIn(vs ...time.Time) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldPublishedAt), v...))
		},
	)
}

// PublishedAtNotIn applies the NotIn predicate on the "published_at" field.
func PublishedAtNotIn(vs ...time.Time) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldPublishedAt), v...))
		},
	)
}

// PublishedAtGT applies the GT predicate on the "published_at" field.
func PublishedAtGT(v time.Time) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldPublishedAt), v))
		},
	)
}

// PublishedAtGTE applies the GTE predicate on the "published_at" field.
func PublishedAtGTE(v time.Time) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldPublishedAt), v))
		},
	)
}

// PublishedAtLT applies the LT predicate on the "published_at" field.
func PublishedAtLT(v time.Time) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldPublishedAt), v))
		},
	)
}

// PublishedAtLTE applies the LTE predicate on the "published_at" field.
func PublishedAtLTE(v time.Time) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldPublishedAt), v))
		},
	)
}

// InstallationIDEQ applies the EQ predicate on the "installation_id" field.
func InstallationIDEQ(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldInstallationID), v))
		},
	)
}

// InstallationIDNEQ applies the NEQ predicate on the "installation_id" field.
func InstallationIDNEQ(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldInstallationID), v))
		},
	)
}

// InstallationIDIn applies the In predicate on the "installation_id" field.
func InstallationIDIn(vs ...int64) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldInstallationID), v...))
		},
	)
}

// InstallationIDNotIn applies the NotIn predicate on the "installation_id" field.
func InstallationIDNotIn(vs ...int64) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldInstallationID), v...))
		},
	)
}

// InstallationIDGT applies the GT predicate on the "installation_id" field.
func InstallationIDGT(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldInstallationID), v))
		},
	)
}

// InstallationIDGTE applies the GTE predicate on the "installation_id" field.
func InstallationIDGTE(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldInstallationID), v))
		},
	)
}

// InstallationIDLT applies the LT predicate on the "installation_id" field.
func InstallationIDLT(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldInstallationID), v))
		},
	)
}

// InstallationIDLTE applies the LTE predicate on the "installation_id" field.
func InstallationIDLTE(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldInstallationID), v))
		},
	)
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldAppID), v))
		},
	)
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldAppID), v))
		},
	)
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...int64) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldAppID), v...))
		},
	)
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...int64) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldAppID), v...))
		},
	)
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldAppID), v))
		},
	)
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldAppID), v))
		},
	)
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldAppID), v))
		},
	)
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v int64) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldAppID), v))
		},
	)
}

// RepoNameEQ applies the EQ predicate on the "repo_name" field.
func RepoNameEQ(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldRepoName), v))
		},
	)
}

// RepoNameNEQ applies the NEQ predicate on the "repo_name" field.
func RepoNameNEQ(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldRepoName), v))
		},
	)
}

// RepoNameIn applies the In predicate on the "repo_name" field.
func RepoNameIn(vs ...string) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldRepoName), v...))
		},
	)
}

// RepoNameNotIn applies the NotIn predicate on the "repo_name" field.
func RepoNameNotIn(vs ...string) predicate.Module {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Module(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldRepoName), v...))
		},
	)
}

// RepoNameGT applies the GT predicate on the "repo_name" field.
func RepoNameGT(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldRepoName), v))
		},
	)
}

// RepoNameGTE applies the GTE predicate on the "repo_name" field.
func RepoNameGTE(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldRepoName), v))
		},
	)
}

// RepoNameLT applies the LT predicate on the "repo_name" field.
func RepoNameLT(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldRepoName), v))
		},
	)
}

// RepoNameLTE applies the LTE predicate on the "repo_name" field.
func RepoNameLTE(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldRepoName), v))
		},
	)
}

// RepoNameContains applies the Contains predicate on the "repo_name" field.
func RepoNameContains(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldRepoName), v))
		},
	)
}

// RepoNameHasPrefix applies the HasPrefix predicate on the "repo_name" field.
func RepoNameHasPrefix(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldRepoName), v))
		},
	)
}

// RepoNameHasSuffix applies the HasSuffix predicate on the "repo_name" field.
func RepoNameHasSuffix(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldRepoName), v))
		},
	)
}

// RepoNameEqualFold applies the EqualFold predicate on the "repo_name" field.
func RepoNameEqualFold(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldRepoName), v))
		},
	)
}

// RepoNameContainsFold applies the ContainsFold predicate on the "repo_name" field.
func RepoNameContainsFold(v string) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldRepoName), v))
		},
	)
}

// HasVersion applies the HasEdge predicate on the "version" edge.
func HasVersion() predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			t1 := s.Table()
			s.Where(
				sql.In(
					t1.C(FieldID),
					sql.Select(VersionColumn).
						From(sql.Table(VersionTable)).
						Where(sql.NotNull(VersionColumn)),
				),
			)
		},
	)
}

// HasVersionWith applies the HasEdge predicate on the "version" edge with a given conditions (other predicates).
func HasVersionWith(preds ...predicate.ModuleVersion) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			t1 := s.Table()
			t2 := sql.Select(VersionColumn).From(sql.Table(VersionTable))
			for _, p := range preds {
				p(t2)
			}
			s.Where(sql.In(t1.C(FieldID), t2))
		},
	)
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Module) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			for _, p := range predicates {
				p(s)
			}
		},
	)
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Module) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			for i, p := range predicates {
				if i > 0 {
					s.Or()
				}
				p(s)
			}
		},
	)
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Module) predicate.Module {
	return predicate.Module(
		func(s *sql.Selector) {
			p(s.Not())
		},
	)
}
