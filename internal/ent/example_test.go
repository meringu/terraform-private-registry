// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"log"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
)

// dsn for the database. In order to run the tests locally, run the following command:
//
//	 ENT_INTEGRATION_ENDPOINT="root:pass@tcp(localhost:3306)/test?parseTime=True" go test -v
//
var dsn string

func ExampleModule() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the module's edges.
	mv0 := client.ModuleVersion.
		Create().
		SetMajor(1).
		SetMinor(1).
		SetPatch(1).
		SetTag("string").
		SaveX(ctx)
	log.Println("moduleversion created:", mv0)

	// create module vertex with its edges.
	m := client.Module.
		Create().
		SetOwner("string").
		SetNamespace("string").
		SetName("string").
		SetProvider("string").
		SetDescription("string").
		SetSource("string").
		SetDownloads(1).
		SetPublishedAt(time.Now()).
		SetInstallationID(1).
		SetAppID(1).
		SetRepoName("string").
		AddVersion(mv0).
		SaveX(ctx)
	log.Println("module created:", m)

	// query edges.
	mv0, err = m.QueryVersion().First(ctx)
	if err != nil {
		log.Fatalf("failed querying version: %v", err)
	}
	log.Println("version found:", mv0)

	// Output:
}
func ExampleModuleVersion() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the moduleversion's edges.

	// create moduleversion vertex with its edges.
	mv := client.ModuleVersion.
		Create().
		SetMajor(1).
		SetMinor(1).
		SetPatch(1).
		SetTag("string").
		SaveX(ctx)
	log.Println("moduleversion created:", mv)

	// query edges.

	// Output:
}
